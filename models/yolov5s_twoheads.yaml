# YOLOv5 ðŸš€ by Ultralytics, AGPL-3.0 license

# Parameters
nc: 80 # number of classes
depth_multiple: 0.33 # model depth multiple
width_multiple: 0.50 # layer channel multiple
anchors:
  - [10, 13, 16, 30, 33, 23] # P3/8
  - [30, 61, 62, 45, 59, 119] # P4/16
  - [116, 90, 156, 198, 373, 326] # P5/32

# YOLOv5 v6.0 backbone
backbone:
  # [from, number, module, args]

  # from: from which layer the module input comes from. Uses python syntax so -1 indicates prior layer.
  # number:  indicates the number of times a module repeats or how many repeats repeatable modules like C3 use
  # args: module arguments (input channels inherited automatically)

  [

    [-1, 1, Conv, [64, 6, 2, 2]], # 0-P1/2
    # Layer 0: torch.Size([16, 32, 320, 320])

    [-1, 1, Conv, [128, 3, 2]], # 1-P2/4
    # Layer 1: torch.Size([16, 64, 160, 160])

    [-1, 3, C3, [128]],
    # Layer 2: torch.Size([16, 64, 160, 160])

    [-1, 1, Conv, [256, 3, 2]], # 3-P3/8
    # Layer 3: torch.Size([16, 128, 80, 80])

    [-1, 6, C3, [256]],
    # Layer 4: torch.Size([16, 128, 80, 80])

    [-1, 1, Conv, [512, 3, 2]], # 5-P4/16
    # Layer 5: torch.Size([16, 256, 40, 40])

    [-1, 9, C3, [512]],
    # Layer 6: torch.Size([16, 256, 40, 40])

    [-1, 1, Conv, [1024, 3, 2]], # 7-P5/32
    # Layer 7: torch.Size([16, 512, 20, 20])

    [-1, 3, C3, [1024]],
    # Layer 8: torch.Size([16, 512, 20, 20])

    [-1, 1, SPPF, [1024, 5]], # 9
  ]

# YOLOv5 v6.0 head
head: [
    [-1, 1, Conv, [512, 1, 1]],
    [-1, 1, nn.Upsample, [None, 2, "nearest"]],
    [[-1, 6], 1, Concat, [1]], # cat backbone P4
    [-1, 3, C3, [512, False]], # 13

    [-1, 1, Conv, [256, 1, 1]],
    [-1, 1, nn.Upsample, [None, 2, "nearest"]],
    [[-1, 4], 1, Concat, [1]], # cat backbone P3
    [-1, 3, C3, [256, False]], # 17 (P3/8-small)

    [-1, 1, Conv, [256, 3, 2]],
    [[-1, 14], 1, Concat, [1]], # cat head P4
    [-1, 3, C3, [512, False]], # 20 (P4/16-medium)

    [-1, 1, Conv, [512, 3, 2]],
    [[-1, 10], 1, Concat, [1]], # cat head P5
    [-1, 3, C3, [1024, False]], # 23 (P5/32-large)

    [[17, 20, 23], 1, Detect, [nc, anchors]], # Detect(P3, P4, P5)
  ]
